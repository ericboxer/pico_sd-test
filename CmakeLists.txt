# Set minimum required version
cmake_minimum_required(VERSION 3.21)

# Include build functions
include($ENV{PICO_SDK_PATH}/external/pico_sdk_import.cmake)

#  Set the name of the projects and C/C++ standards
project(SD_TEST C CXX ASM)
set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)



# Create the pcio-sdk subdirectory in our project for the libraries
pico_sdk_init()





# Tell CMake where to find the executable source file
add_executable(${PROJECT_NAME}
    main.c
    # SD.c
    # cJSON.c
)


# Specify things in the preprocessor
target_compile_definitions(${PROJECT_NAME} PRIVATE

    VERSION_MAJOR=0
)

target_compile_definitions(${PROJECT_NAME} PRIVATE
    VERSION_MINOR=1

)


# Tell CMake where to find other source code
# add_subdirectory(includes build)
add_subdirectory(lib/no-OS-FatFS-SD-SPI-RPi-Pico/FatFs_SPI build)
include_directories(includes)


# Create map/bin/hex/uf2 files
pico_add_extra_outputs(${PROJECT_NAME})

# Link to pico_stdlib (gpio, time, etc)
target_link_libraries(${PROJECT_NAME}
    pico_stdlib
    # FatFs_SPI
    hardware_pwm

)


# Enable USB output, disable UART

pico_enable_stdio_usb(${PROJECT_NAME} 1)
pico_enable_stdio_uart(${PROJECT_NAME} 0)